resources:
  - name: GitHubTFProviderRepo1JFrog
    type: GitRepo
    configuration:
      gitProvider: partnership_github
      path: jfrog/terraform-provider-artifactory # if path is modified, change the name as well, per Pipelines doc
      branches:
        include: pipelines
      buildOn:
        commit: false
        pullRequestCreate: true
      cancelPendingRunsOn:
        pullRequestUpdate: true
pipelines:
  - name: tf_provider_artifactory_test
    steps:
      - name: build_and_run_tf_provider
        type: Bash
        configuration:
          nodePool: default
          priority: 1
          timeoutSeconds: 1800 # 30 minutes
          runtime:
            type: image
            image:
              auto:
                language: go
                versions:
                  - "1.18"
          integrations:
            - name: partnership_slack
            - name: partnership_github
            #- name: repo21_artifactory
            - name: terraform_artifactory_sonarqube
            - name: partnership_rt_cluster_license
          inputResources:
            - name: GitHubTFProviderRepo1JFrog
          environmentVariables:
            USE_LATEST_RT_VERSION: "true"
            ARTIFACTORY_TEST_VERSION: 7.49.8
            GO_VERSION: 1.18
            SONAR_SCANNER_VERSION: 4.7.0.2747
            SONAR_SCANNER_HOME: $HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
            SONAR_SCANNER_OPTS: "-server"
        execution:
          onStart:
            #TODO: remove
            - printenv
            - echo "Preparing for work. Install Helm, Terraform, GoReleaser, and SonarQube"
            - ls -al && pwd
            - echo "Helm 3 install"
            - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh
            - echo "Run Helm installation script" && ./get_helm.sh && rm get_helm.sh
            - helm version
            - sudo apt update
            - go version
            - echo "Install latest Terraform version"
            - wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            - gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
            - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            - sudo apt update && apt-get install terraform && terraform -version
            - echo "Install GoReleaser"
            - echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            - sudo apt update
            - sudo apt install goreleaser
            - echo "Install SonarQube"
            - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
            - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          onExecute:
            - add_run_variables gitHubRepoUrl=${res_GitHubTFProviderRepo1JFrog_gitRepoRepositorySshUrl}
            - add_run_variables TFProviderRepo=$(echo ${gitHubRepoUrl} | sed -e 's/git@/@/g' -e 's/:/\//g')
            - add_run_variables repoFolder=$(echo "${res_GitHubTFProviderRepo1JFrog_gitRepoFullName}" | sed -e 's/.*\///g')
            - cd ${res_GitHubTFProviderRepo1JFrog_resourcePath} # we need to manually move into the resource path
            - echo "Verify the code contents merged feature branch with master branch (detached mode)"
            - git branch && ls -al
            - add_run_variables PROVIDER_VERSION=$(head -1 CHANGELOG.md | awk '{print $2}')
            - export NEXT_PROVIDER_VERSION=$(echo ${PROVIDER_VERSION}| awk -F '.' '{print $1 "." $2 "." $3 +1 }')
            - echo "Provider version from the CHANGELOG.md ${PROVIDER_VERSION}"
            - echo ${NEXT_PROVIDER_VERSION}
            - echo "Rename the build to make it work on Ubuntu"
            - cat GNUmakefile | sed -e "s/darwin_amd64/linux_amd64/g" > GNUmakefile.tmp
            - cp GNUmakefile.tmp GNUmakefile && rm GNUmakefile.tmp
            - cat GNUmakefile
            - cat sample.tf | sed -e "s/version =.*/version = \"${NEXT_PROVIDER_VERSION}\"/g" > sample.tf.tmp
            - cp sample.tf.tmp sample.tf && rm sample.tf.tmp
            - cat sample.tf
            - echo "Download RT licenses from Partners RT instanse to scripts folder"
            - jfrog config show && jfrog --version
            - echo ${int_partnership_rt_cluster_license_5licenses} > scripts/artifactory.lic
            - cat scripts/artifactory.lic
            - echo "Set Artifactory version, run RT in a container"
            - >-
              if [[ ${USE_LATEST_RT_VERSION} == "true" ]]; then
               helm repo add artifactory https://charts.jfrog.io
               helm repo update
               add_run_variables ARTIFACTORY_VERSION=$(helm search repo | grep "artifactory " | awk '{$1=$1};1' |  cut -f3 -d " ")
               echo "Artifactory version: "${ARTIFACTORY_VERSION}
              else
               add_run_variables ARTIFACTORY_VERSION=${ARTIFACTORY_TEST_VERSION}
               echo "Artifactory version: "${ARTIFACTORY_VERSION}
              fi
            - export ARTIFACTORY_CONTAINER_NAME=artifactory
            - >-
              docker run -i --name ${ARTIFACTORY_CONTAINER_NAME} -t -d --rm -v "${res_GitHubTFProviderRepo1JFrog_resourcePath}/scripts/artifactory.lic:/artifactory_extra_conf/artifactory.lic:ro" \
                    -p8081:8081 -p8082:8082 -p8080:8080 releases-docker.jfrog.io/jfrog/artifactory-pro:${ARTIFACTORY_VERSION}
            - echo "Set localhost to a container IP address, since we run docker inside of docker"
            - export LOCALHOST=$(docker inspect -f '{{`{{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}`}}' ${ARTIFACTORY_CONTAINER_NAME})
            - echo "Using ${LOCALHOST} as 'localhost' ip address"
            - echo "Waiting for Artifactory to start (doesn't reflect the start of the UI!)"
            - >-
              until curl -sf -u admin:password http://${LOCALHOST}:8081/artifactory/api/system/licenses/; do
                  printf '.'
                  sleep 4
              done
            - echo "Add variables needed to run Terraform Provider"
            - export ARTIFACTORY_URL="http://${LOCALHOST}:8082"
            - export ARTIFACTORY_USERNAME=admin
            - export ARTIFACTORY_PASSWORD=password
            - echo "Get cookie to generate Access token. We need a pause to let UI come up to get cookies"
            - sleep 180
            - sudo curl http://${LOCALHOST}:8082/router/api/v1/system/health
            - >-
              export COOKIES=$(curl -c - "${ARTIFACTORY_URL}/ui/api/v1/ui/auth/login?_spring_security_remember_me=false" \
                            --header "accept: application/json, text/plain, */*" \
                            --header "content-type: application/json;charset=UTF-8" \
                            --header "x-requested-with: XMLHttpRequest" \
                            -d '{"user":"admin","password":"'"${ARTIFACTORY_PASSWORD}"'","type":"login"}' | grep FALSE)
            - export REFRESHTOKEN=$(echo $COOKIES | grep REFRESHTOKEN | awk '{print $14}')
            - export ACCESSTOKEN=$(echo $COOKIES | grep ACCESSTOKEN | awk '{print $7}') # awk returns null on Mac, and the actual key on Ubuntu
            - >-
              export ACCESS_KEY=$(curl -g --request GET "${ARTIFACTORY_URL}/ui/api/v1/system/security/token?services[]=all" \
                                  --header "accept: application/json, text/plain, */*" \
                                  --header "x-requested-with: XMLHttpRequest" \
                                  --header "cookie: ACCESSTOKEN=${ACCESSTOKEN}; REFRESHTOKEN=${REFRESHTOKEN}")
            - add_run_variables ARTIFACTORY_ACCESS_TOKEN=${ACCESS_KEY}
            - echo "Unset ARTIFACTORY_PASSWORD, acceptance test will use ARTIFACTORY_ACCESS_TOKEN instead"
            - unset ARTIFACTORY_PASSWORD
            - export TF_ACC=true
            #- make acceptance
            - export SONAR_TOKEN=${int_terraform_artifactory_sonarqube_token}
            - make scan
            - make install
          onSuccess:
            - echo "Success"
            - send_notification partnership_slack --text "${pipeline_name} step <${step_url}|${step_name}> is completed. Version ${PROVIDER_VERSION:-" wasn't set"}."
          onFailure:
            - echo "Failure"
            - send_notification partnership_slack --text "${pipeline_name} pipeline failed on <${step_url}|${step_name}> step"
          onComplete:
            - echo "Complete"

      - name: pr_info_add_rt_version
        type: Bash
        configuration:
          nodePool: default
          priority: 1
          integrations:
            - name: partnership_slack
            - name: partnership_github
          inputSteps:
            - name: build_and_run_tf_provider
          inputResources:
            - name: GitHubTFProviderRepo1JFrog
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - export PR_URL=${res_GitHubTFProviderRepo1JFrog_commitUrl}
            - export PR_COMMITTER=${res_GitHubTFProviderRepo1JFrog_committerLogin}
            - export PR_BRANCH=${res_GitHubTFProviderRepo1JFrog_headCommitRef}
            - export PR_TITLE=$(echo ${res_GitHubTFProviderRepo1JFrog_commitMessage:0:100}... | sed 's/[^[:print:]\t]//g')
#            - >-
#              if [[ -z "${PR_URL}" ]] || [[ -z ${res_GitHubTFProviderRepo1JFrog_headCommitRef} ]]; then
#                echo "PR was not created. PR link or commit branch var is empty!"
#                exit 1
#              fi
            - >-
              if [[ "${res_GitHubTFProviderRepo1JFrog_headCommitRef}" != master ]] && [[ "${res_GitHubTFProviderRepo1JFrog_headCommitRef}" != main ]] && [[ $"{res_GitHubTFProviderRepo1JFrog_isPullRequest}" == true ]]; then
                cd ${res_GitHubTFProviderRepo1JFrog_resourcePath}
                echo "Checking out the branch ${res_GitHubTFProviderRepo1JFrog_headCommitRef} where the PR was created from"
                git checkout -b ${res_GitHubTFProviderRepo1JFrog_headCommitRef}
                sed -i -E "0,/(##\s.+\..+\..+\s\(.+\)).*/ s/(##\s.+\..+\..+\s\(.+\)).*/\1. Tested on Artifactory ${ARTIFACTORY_VERSION}/" CHANGELOG.md
                head -10 CHANGELOG.md
                git add CHANGELOG.md
                export REGEX="Changes to be committed*"
                export GIT_STATUS=$(git status)
                if [[ ${GIT_STATUS} =~ ${REGEX} ]]; then
                  echo "Adding Artifactory version to CHANGELOG.md"
                  git config --global user.name 'JFrog CI'
                  git config --global user.email 'jfrog-solutions-ci+1@jfrog.com'
                  git config --get user.name
                  git config --get user.email
                  git commit --author="JFrog CI <jfrog-solutions-ci+1@jfrog.com>" -m "JFrog Pipelines - Add Artifactory version to CHANGELOG.md"
                  git push https://${res_GitHubTFProviderRepo1JFrog_gitProvider_token}${TFProviderRepo}
                else
                  echo "There is nothing to commit: pipeline run wasn't triggered by the PR."
                fi
              fi
          onSuccess:
            - echo "Success"
            - send_notification partnership_slack --text "<${res_GitHubTFProviderRepo1JFrog_gitRepoRepositoryHttpsUrl}|Terraform Provider>. A new PR was submitted by *${PR_COMMITTER}* - <${PR_URL}|${PR_TITLE}>, branch *${PR_BRANCH}*. Changes tested successfully. <@U01H1SLSPA8> or <@UNDRUL1EU> please, review and merge."
          onFailure:
            - >-
              if [[ "${PR_URL}" == null ]]; then
                send_notification partnership_slack --text "${pipeline_name} step ${step_name} is failed. PR was not created (already exists from this head branch?)"
              else
                send_notification partnership_slack --text "${pipeline_name} failed on <${step_url}|${step_name}> step."
              fi
          onComplete:
            - echo "Cleaning up"